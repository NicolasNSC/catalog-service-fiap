// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_repository.go
//
// Generated by this command:
//
//	mockgen -source=vehicle_repository.go -destination=./mocks/vehicle_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/NicolasNSC/catalog-service-fiap/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockVehicleRepository is a mock of VehicleRepository interface.
type MockVehicleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleRepositoryMockRecorder
	isgomock struct{}
}

// MockVehicleRepositoryMockRecorder is the mock recorder for MockVehicleRepository.
type MockVehicleRepositoryMockRecorder struct {
	mock *MockVehicleRepository
}

// NewMockVehicleRepository creates a new mock instance.
func NewMockVehicleRepository(ctrl *gomock.Controller) *MockVehicleRepository {
	mock := &MockVehicleRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleRepository) EXPECT() *MockVehicleRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockVehicleRepository) GetByID(ctx context.Context, id string) (*domain.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVehicleRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVehicleRepository)(nil).GetByID), ctx, id)
}

// Save mocks base method.
func (m *MockVehicleRepository) Save(ctx context.Context, vehicle *domain.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockVehicleRepositoryMockRecorder) Save(ctx, vehicle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockVehicleRepository)(nil).Save), ctx, vehicle)
}

// Update mocks base method.
func (m *MockVehicleRepository) Update(ctx context.Context, vehicle *domain.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVehicleRepositoryMockRecorder) Update(ctx, vehicle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVehicleRepository)(nil).Update), ctx, vehicle)
}
