// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_usecase.go
//
// Generated by this command:
//
//	mockgen -source=vehicle_usecase.go -destination=./mocks/vehicle_usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/NicolasNSC/catalog-service-fiap/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockVehicleUseCaseInterface is a mock of VehicleUseCaseInterface interface.
type MockVehicleUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockVehicleUseCaseInterfaceMockRecorder is the mock recorder for MockVehicleUseCaseInterface.
type MockVehicleUseCaseInterfaceMockRecorder struct {
	mock *MockVehicleUseCaseInterface
}

// NewMockVehicleUseCaseInterface creates a new mock instance.
func NewMockVehicleUseCaseInterface(ctrl *gomock.Controller) *MockVehicleUseCaseInterface {
	mock := &MockVehicleUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockVehicleUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleUseCaseInterface) EXPECT() *MockVehicleUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVehicleUseCaseInterface) Create(ctx context.Context, input dto.InputCreateVehicleDTO) (*dto.OutputCreateVehicleDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(*dto.OutputCreateVehicleDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVehicleUseCaseInterfaceMockRecorder) Create(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVehicleUseCaseInterface)(nil).Create), ctx, input)
}

// Update mocks base method.
func (m *MockVehicleUseCaseInterface) Update(ctx context.Context, id string, input dto.InputUpdateVehicleDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockVehicleUseCaseInterfaceMockRecorder) Update(ctx, id, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVehicleUseCaseInterface)(nil).Update), ctx, id, input)
}
